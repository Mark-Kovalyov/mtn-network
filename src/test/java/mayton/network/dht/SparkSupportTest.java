package mayton.network.dht;

import io.vavr.control.Either;
import org.junit.jupiter.api.Test;

import java.util.Optional;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

class SparkSupportTest {

    @Test
    void test() {
        String udpBody = "64313A6164323A696432303ACF7D361A318552BF4F07F887C1CF90EA111EF8C7393A696E666F5F6861736832303ACF7D344EA1600A22EFADB7FF1B27E9829D3FDCBD65313A71393A6765745F7065657273313A74323A203B313A76343A4C540102313A79313A7165";
        Optional<String> jsonOpt = SparkSupport.dumpDhtMessageToPlainJson(udpBody);
        assertEquals(jsonOpt.get(), "{\"a\":{\"id\":\"cf7d361a318552bf4f07f887c1cf90ea111ef8c7\",\"info_hash\":\"cf7d344ea1600a22efadb7ff1b27e9829d3fdcbd\"},\"q\":\"6765745f7065657273\",\"t\":\"203b\",\"v\":\"4c540102\",\"y\":\"71\"}");
    }

    @Test
    void testNonDecodedRealData() {
        String b
        String b2 = "410091C0118AB1DD0000000000100000E45A0000";
        String b3 = "4102F4CE5E08C1A67FFFFFFF0000F0002971000000080000000000000000";

        Either<String, String> res = SparkSupport.dumpDhtMessageToPlainJsonDebug(b1);
        assertTrue(res.isLeft());
        assertEquals(res.getLeft(),"unexpected character 0xCB at offset 0");

        res = SparkSupport.dumpDhtMessageToPlainJsonDebug(b2);
        assertTrue(res.isLeft());
        assertEquals(res.getLeft(),"unexpected character 0x41 at offset 0");

        res = SparkSupport.dumpDhtMessageToPlainJsonDebug(b3);
        assertTrue(res.isLeft());
        assertEquals(res.getLeft(),"unexpected character 0x41 at offset 0");
    }

}
